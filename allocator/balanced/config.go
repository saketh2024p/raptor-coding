package balanced

import (
	"encoding/json"
	"errors"

	"github.com/ipfs-cluster/ipfs-cluster/config"
	"github.com/kelseyhightower/envconfig"
)

const configKey = "balanced"
const envConfigKey = "cluster_balanced"

// These are the default values for a Config.
var (
	DefaultAllocateBy = []string{"tag:group", "freespace"}
	DefaultRaptorParams = RaptorConfig{
		BlockSize:    1024, // Default block size
		CodingRate:   0.5,  // Default coding rate
		Redundancy:   2,    // Default redundancy factor
	}
)

// RaptorConfig defines Raptor code-specific parameters.
type RaptorConfig struct {
	BlockSize  int     `json:"block_size"`  // Size of data blocks
	CodingRate float64 `json:"coding_rate"` // Ratio of redundancy
	Redundancy int     `json:"redundancy"`  // Additional blocks for fault tolerance
}

// Config allows to initialize the Allocator.
type Config struct {
	config.Saver

	AllocateBy   []string     `json:"allocate_by"`
	RaptorParams RaptorConfig `json:"raptor_params"`
}

type jsonConfig struct {
	AllocateBy   []string     `json:"allocate_by"`
	RaptorParams RaptorConfig `json:"raptor_params"`
}

// ConfigKey returns a human-friendly identifier for this
// Config's type.
func (cfg *Config) ConfigKey() string {
	return configKey
}

// Default initializes this Config with sensible values.
func (cfg *Config) Default() error {
	cfg.AllocateBy = DefaultAllocateBy
	cfg.RaptorParams = DefaultRaptorParams
	return nil
}

// ApplyEnvVars fills in any Config fields found
// as environment variables.
func (cfg *Config) ApplyEnvVars() error {
	jcfg := cfg.toJSONConfig()

	err := envconfig.Process(envConfigKey, jcfg)
	if err != nil {
		return err
	}

	return cfg.applyJSONConfig(jcfg)
}

// Validate checks that the fields of this configuration have
// sensible values.
func (cfg *Config) Validate() error {
	if len(cfg.AllocateBy) == 0 {
		return errors.New("allocate_by is invalid")
	}

	if cfg.RaptorParams.BlockSize <= 0 {
		return errors.New("invalid block size for Raptor code")
	}

	if cfg.RaptorParams.CodingRate <= 0 || cfg.RaptorParams.CodingRate > 1 {
		return errors.New("invalid coding rate for Raptor code")
	}

	if cfg.RaptorParams.Redundancy < 0 {
		return errors.New("invalid redundancy for Raptor code")
	}

	return nil
}

// LoadJSON parses a raw JSON byte-slice as generated by ToJSON().
func (cfg *Config) LoadJSON(raw []byte) error {
	jcfg := &jsonConfig{}
	err := json.Unmarshal(raw, jcfg)
	if err != nil {
		return err
	}

	cfg.Default()

	return cfg.applyJSONConfig(jcfg)
}

func (cfg *Config) applyJSONConfig(jcfg *jsonConfig) error {
	// When unset, leave default
	if len(jcfg.AllocateBy) > 0 {
		cfg.AllocateBy = jcfg.AllocateBy
	}

	if jcfg.RaptorParams.BlockSize > 0 {
		cfg.RaptorParams = jcfg.RaptorParams
	}

	return cfg.Validate()
}

// ToJSON generates a human-friendly JSON representation of this Config.
func (cfg *Config) ToJSON() ([]byte, error) {
	jcfg := cfg.toJSONConfig()

	return config.DefaultJSONMarshal(jcfg)
}

func (cfg *Config) toJSONConfig() *jsonConfig {
	return &jsonConfig{
		AllocateBy:   cfg.AllocateBy,
		RaptorParams: cfg.RaptorParams,
	}
}

// ToDisplayJSON returns JSON config as a string.
func (cfg *Config) ToDisplayJSON() ([]byte, error) {
	return config.DisplayJSON(cfg.toJSONConfig())
}
